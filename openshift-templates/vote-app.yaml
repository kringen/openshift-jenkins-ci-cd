kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: ${APPLICATION_NAME}
objects:
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      annotations:
        description: Stream of application images
      name: ${APPLICATION_NAME}
      labels:
        template: ${APPLICATION_NAME}
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      annotations:
        description: Defines how to build the application from git
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        template: ${APPLICATION_NAME}
    spec:
      source:
        type: Git
        git:
          uri: "${SOURCE_REPOSITORY_URL}"
        contextDir: "${CONTEXT_DIRECTORY}"
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      strategy:
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: python:${PYTHON_VERSION}
            namespace: openshift
        type: Source
      triggers:
      - type: Generic
        generic:
          secret: ${GITHUB_WEBHOOK_SECRET}
      - type: GitHub
        github:
          secret: ${GITHUB_WEBHOOK_SECRET}
      - type: ImageChange
      - type: ConfigChange
  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      annotations:
        description: Defines how to deploy the application
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        template: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: ${{REPLICA_COUNT}}
      selector:
        name: ${APPLICATION_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            name: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
          - env: []
            image: image-registry.openshift-image-registry.svc:5000/${PROJECT}/${APPLICATION_NAME}:${TAG}
            cmd: ["gunicorn", "app:app", "-b", "0.0.0.0:${{PORT}}", "--log-file", "-", "--access-logfile", "-", "--workers", "5", "--keep-alive", "0"]
            livenessProbe:
              httpGet:
                path: /
                port: ${{PORT}}
              initialDelaySeconds: 30
              timeoutSeconds: 3
            name: ${APPLICATION_NAME}
            ports:
            - containerPort: ${{PORT}}
            readinessProbe:
              httpGet:
                path: /
                port: ${{PORT}}
              initialDelaySeconds: 3
              timeoutSeconds: 3
            resources:
              limits:
                memory: ${RESOURCE_LIMIT_MEMORY}
      triggers:
      - type: ConfigChange
  - kind: Service
    apiVersion: v1
    metadata:
      annotations:
        description: Exposes and load balances the application pods
      labels:
        template: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - name: tcp-${PORT}
        port: ${{PORT}}
        targetPort: ${{PORT}}
      selector:
        name: ${APPLICATION_NAME}
  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        template: ${APPLICATION_NAME}
    spec:
      host: ""
      to:
        kind: Service
        name: ${APPLICATION_NAME}
  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      annotations:
        description: Defines how to deploy the application
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        template: ${APPLICATION_NAME}
      name: redis
    spec:
      replicas: ${{REDIS_REPLICA_COUNT}}
      selector:
        name: redis
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            name: redis
          name: redis
        spec:
          containers:
          - env: []
            image: image-registry.openshift-image-registry.svc:5000/openshift/redis:latest
            name: redis
            ports:
            - containerPort: 6379
      triggers:
      - type: ConfigChange
  - kind: Service
    apiVersion: v1
    metadata:
      annotations:
        description: Exposes and load balances the application pods
      labels:
        template: ${APPLICATION_NAME}
      name: redis
    spec:
      ports:
      - name: tcp-6379
        port: 6379
        targetPort: 6379
      selector:
        name: redis
parameters:
  - name: PROJECT
    displayName: Project or Namespace
    value: sandbox
    required: true
  - name: APPLICATION_NAME
    displayName: Application Name
    description: The name of the application - used for resource names and labels
    value: vote-app
    required: true
  - name: TAG
    displayName: tag
    value: latest
    required: true
  - name: SOURCE_REPOSITORY_URL
    displayName: Source Repository URL
    description: The URL for the application git repository
    value: https://github.com/kringen/openshift-jenkins-ci-cd
    required: true
  - name: CONTEXT_DIRECTORY
    displayName: Context Directory
    description: Directory containing application in source repository.
    value: /applications/vote
    required: false
  - name: PYTHON_VERSION
    displayName: Python Version
    description: Python builder image version
    value: 3.8-ubi8
  - name: GITHUB_WEBHOOK_SECRET
    description: A secret string used to configure the GitHub webhook
    generate: expression 
    from: "[a-zA-Z0-9]{40}" 
  - name: REPLICA_COUNT
    description: Number of replicas to run
    value: "1"
    required: true
  - name: PORT
    description: Port on which the application listens.
    value: "8080"
    required: false
  - name: RESOURCE_LIMIT_MEMORY
    description: "Limit the memory consumed by a pod before it is destroyed and re-created."
    value: 512Mi
  - name: REDIS_REPLICA_COUNT
    description: Redis Replica Count
    value: "1"
    required: true